=======
 Notes
=======
:Date: $Date: 2001/08/23 03:52:29 $
:Revision: $Revision: 1.8 $


To Do
=====

- Complete PEP 258 DPS Generic Implementation Details.

  - Fill in the blanks in API details.

- Rework PEP 257, separating style from spec from tools, wrt DPS. See
  Doc-SIG from 2001-06-19/20.

- PEP 256: Draw the framework diagram properly as a graphic (once PEPs
  support graphics !-).

- Document!

  - Modules.
  - DTD element semantics.

- Get cracking on the DPS itself!

- Add layout component to framework? Or part of the formatter?

- Add validation? See http://pytrex.sourceforge.net, RELAX NG.

- Incorporate "modes", using Tony Ibbs' 2001-08-03 Doc-SIG post
  'Suggestions for reST "modes"' as a base.

- Ask Python-dev for opinions (GvR for a pronouncement) on special
  variables (__author__, __version__, etc.): convenience vs. namespace
  pollution. Ask opinions on whether or not the DPS should recognize &
  use them.


I/O APIs
========

Can we use codecs for this?  Input to parser and output from formatter
are strings, but the intermediate data structure is a DOM tree.


Docstring Extractor
===================

We need code that scans a parsed Python module, and returns an ordered
tree containing the names, docstrings (including attribute and
additional docstrings), and additional info (in parentheses below) of
all of the following objects:

- packages
- modules
- module attributes (+ values)
- classes (+ inheritance)
- class attributes (+ values)
- instance attributes (+ values)
- methods (+ formal parameters & defaults)
- functions (+ formal parameters & defaults)

(Extract comments too? For example, comments at the start of a module
would be a good place for bibliographic field lists.)

In order to evaluate interpreted text cross-references, namespaces for
each of the above will also be required.

See python-dev/docstring-develop thread "AST mining", started on
2001-08-14.


Local Variables:
mode: indented-text
indent-tabs-mode: nil
sentence-end-double-space: t
fill-column: 70
End:
